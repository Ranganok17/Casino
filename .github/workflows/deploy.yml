name: Deploy Infra and App

permissions:
    id-token: write   # allow requesting the OIDC JWT token
    contents: read    # allow reading the repo (for actions/checkout)

on:
  push:
    branches: ["helm"]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (e.g. dev or prod)'
        required: true
        default: 'dev'
        type: string

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - uses: actions/checkout@v3
      # Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.5.7'  # Specify the desired version
      - name: Upgrade AWS CLI to latest version
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          aws --version
              
      - name: Configure AWS Credentials (Dev)
        if: env.ENVIRONMENT == 'dev'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN_DEV }}
          aws-region: eu-central-1
      - name: Configure AWS Credentials (Prod)
        if: env.ENVIRONMENT == 'prod'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN_PROD }}
          aws-region: eu-central-1
      - name: Build Lambda Deployment Package
        working-directory: lambda
        run: |
          npm install            # Install dependencies from package.json
          npm prune --production # Cleanup node_modules
          npm dedupe
          7z a -tzip deployment_package.zip .   # Package all files into a zip file 
      - name: Terraform Init
        run: terraform -chdir=terraform/${{env.ENVIRONMENT}} init -upgrade
      - name: Terraform Plan
        run: terraform -chdir=terraform/${{env.ENVIRONMENT}} plan
      - name: Terraform Apply
        run: terraform -chdir=terraform/${{env.ENVIRONMENT}} apply -auto-approve

  deploy_helm:
    runs-on: ubuntu-latest
    needs: terraform
    env:
      ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Credentials (Dev)
        if: env.ENVIRONMENT == 'dev'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN_DEV }}
          aws-region: eu-central-1
      - name: Configure AWS Credentials (Prod)
        if: env.ENVIRONMENT == 'prod'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN_PROD }}
          aws-region: eu-central-1
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name radu-casino-${{env.ENVIRONMENT}} --region eu-central-1
      - name: Install yq
        run: |
          mkdir -p $HOME/bin
          wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O $HOME/bin/yq
          chmod +x $HOME/bin/yq
          export PATH=$HOME/bin:$PATH
          yq --version
      - name: Patch kubeconfig for v1beta1 + interactiveMode
        run: |
          # The AWS CLI's get-token call still returns "v1beta1", so keep v1beta1
          yq eval '.users[].user.exec.apiVersion = "client.authentication.k8s.io/v1beta1"' -i ~/.kube/config
          yq eval '.users[].user.exec.interactiveMode = "Never"' -i ~/.kube/config
    
      - name: Show patched kubeconfig
        run: |
          cat ~/.kube/config
  
      - name: Debug get-token
        run: |
          # This should succeed and return a token
          aws eks get-token --region eu-central-1 --cluster-name radu-casino-${{env.ENVIRONMENT}} --output json
  
      - name: Deploy Helm Chart (Dev)
        if: env.ENVIRONMENT == 'dev'
        run: helm upgrade --install hello-world helm/hello-world -f helm/hello-world/values-dev.yaml
      - name: Deploy Helm Chart (Prod)
        if: env.ENVIRONMENT == 'prod'
        run: helm upgrade --install hello-world helm/hello-world -f helm/hello-world/values-prod.yaml
